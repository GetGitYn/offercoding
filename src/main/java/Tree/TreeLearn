二叉树： 每个节点最多两个子节点
遍历方式：
前序: 根-左-右
中序：左-根-右
后序：左-右-根

实现方式：递归，循环
广度优先遍历：层次遍历
特例：
二叉搜索树->B树：
左子节点小于等于根节点，右子节点大于等于根节点
平均搜索时间：O(logn)
堆：
最大堆 根节点值最大
最小堆 根节点值最小
堆查找
红黑树：


查找一棵树中序遍历的下一个节点
     1
  2      3
4      5     6
  7         8

  中序遍历：
    4 7 2 1 5 3 8 6

    如果所给节点存在右子树： 下一个节点为右子树中的最左节点
    如果所给节点位于父节点左子树且节点没有右子树 ：父节点为下一个节点
    如果所给节点为父节点右子树且节点没有右子树：顺着父节点向上，
    如果父节点为其父节点的左子树节点，则祖父节点为下一个节点，
    如果父节点为其父节点右子树节点，那么继续循着父节点向上，知道找到的节点为其父节点的左子树，那么节点的父节点为给定节点的下一个节点